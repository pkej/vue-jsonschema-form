(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{419:function(t,a,s){"use strict";s.r(a);var e=s(3),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("h2",{attrs:{id:"basic-inputs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-inputs"}},[t._v("#")]),t._v(" Basic Inputs")]),t._v(" "),s("p",[t._v("Full list of supported built-it components can be found "),s("a",{attrs:{href:"kek"}},[t._v("here")]),t._v(".\n"),s("Demo",{attrs:{"schema-name":"basic"}})],1),t._v(" "),s("h2",{attrs:{id:"nested-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nested-object"}},[t._v("#")]),t._v(" Nested Object")]),t._v(" "),s("p",[t._v("Nesting objects is supported. If you want to omit nested object's property name displayed - set it's "),s("code",[t._v("title")]),t._v(" property to empty string.\n"),s("Demo",{attrs:{"schema-name":"nested"}})],1),t._v(" "),s("h2",{attrs:{id:"array-of-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-of-objects"}},[t._v("#")]),t._v(" Array of Objects")]),t._v(" "),s("p",[t._v("To specify schema for each array element, provide "),s("code",[t._v("items")]),t._v(" parameter in array's schema.\n"),s("Demo",{attrs:{"schema-name":"arrayOfObjects"}})],1),t._v(" "),s("h2",{attrs:{id:"validations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validations"}},[t._v("#")]),t._v(" Validations")]),t._v(" "),s("Demo",{attrs:{"schema-name":"home"}}),t._v(" "),s("h2",{attrs:{id:"conditions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditions"}},[t._v("#")]),t._v(" Conditions")]),t._v(" "),s("Demo",{attrs:{"schema-name":"conditions"}}),t._v(" "),s("h2",{attrs:{id:"default-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#default-values"}},[t._v("#")]),t._v(" Default Values")]),t._v(" "),s("p",[t._v("Sometimes, usually when initializing a new data instance, you would want to use some default values. Full data model object with default values is emitted after initialization through a "),s("code",[t._v("@init-default")]),t._v(" event.")]),t._v(" "),s("div",{staticClass:"language-vue extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("JsonSchema")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":schema")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-model")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dataModel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@init-default")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dataModel = $event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),s("Demo",{attrs:{"schema-name":"defaults","use-defaults":!0}})],1)}),[],!1,null,null,null);a.default=n.exports}}]);